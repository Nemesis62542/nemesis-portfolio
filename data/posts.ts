
import { Post } from '../types';

export const posts: Post[] = [
  {
    id: 'new-portfolio',
    title: '新しいポートフォリオサイトを公開しました',
    date: '2024-07-21',
    excerpt: '自身の活動をより分かりやすく伝えるため、ポートフォリオサイトをリニューアルしました。ReactとTailwind CSSを用いて、モダンなデザインとコンポーネント指向の設計を意識しています。',
    content: `
## はじめに
こんにちは、Nemesisです。この度、自身の活動や制作物をまとめるためのポートフォリオサイトを全面的にリニューアルしました。
採用担当者の方々や、クライアント、同じ業界のクリエイター仲間に対して、私が何者で、何ができるのかを分かりやすく伝えることを目的としています。

## 技術選定
今回のサイト制作では、以下の技術を採用しました。

- **React**: コンポーネントベースでの開発により、メンテナンス性と拡張性を高めました。
- **TypeScript**: 静的型付けを導入することで、開発効率とコードの堅牢性を向上させています。
- **Tailwind CSS**: ユーティリティファーストなCSSフレームワークで、迅速なUI構築とデザインの一貫性を保ちやすくしました。
- **GitHub Pages**: 静的サイトとして公開することで、手軽かつ高速なホスティングを実現しています。

## デザインについて
デザインは、普段から愛用しているVisual Studio Codeの**Dark Modern**テーマを参考にしました。
開発者にとって馴染み深く、目が疲れにくいダークテーマを基調とし、アクセントカラーで情報を際立たせるように工夫しています。

## 今後の展望
今後は、このサイトをハブとして、制作したゲームの紹介記事や、開発で得た知見を共有するブログ記事を定期的に更新していく予定です。
UnityやC#に関する技術的なトピックが中心になるかと思います。

どうぞ、よろしくお願いいたします。
`
  },
  {
    id: 'unity-performance-tuning',
    title: 'Unityにおけるパフォーマンスチューニング入門',
    date: '2024-07-15',
    excerpt: 'Unityでゲームを開発する際に避けては通れないパフォーマンスの問題。本記事では、プロファイラの使い方から具体的な最適化手法まで、基本的な考え方を紹介します。',
    content: `
## パフォーマンスはなぜ重要か
ユーザーに快適なゲーム体験を提供するためには、安定したフレームレートが不可欠です。
特にモバイルゲームやVRゲームでは、パフォーマンスの良し悪しが製品の評価に直結します。

## プロファイラを活用する
最初のステップは、ボトルネックの特定です。Unityには強力な**Profiler**が組み込まれています。

\`\`\`csharp
// Example code snippet
void Update()
{
    // Heavy process here...
    for(int i = 0; i < 10000; i++)
    {
        // Do something
    }
}
\`\`\`
上記のような重い処理がどこにあるのかを、CPU UsageやMemoryの項目で確認しましょう。

## よくある最適化ポイント
- **Draw Callの削減**: Static BatchingやDynamic Batching、GPU Instancingを活用する。
- **メモリ管理**: 不要なアセットのアンロード、オブジェクトプーリングの導入。
- **物理演算**: Fixed Timestepの調整や、不要なRigidbodyの削除。

これらの基本的なテクニックを抑えるだけでも、ゲームのパフォーマンスは大きく改善されるはずです。
    `
  },
];
